function initMagnet() {
  document.querySelectorAll(".custom-btn").forEach((btn) => {
    let frame;
    btn.addEventListener("mousemove", (e) => {
      if (frame) cancelAnimationFrame(frame);
      frame = requestAnimationFrame(() => {
        const rect = btn.getBoundingClientRect();
        const offsetX = e.clientX - rect.left - rect.width / 2;
        const offsetY = e.clientY - rect.top - rect.height / 2;
        btn.style.transform = `translate(${offsetX * 0.1}px, ${offsetY * 0.1}px)`;
      });
    });
    btn.addEventListener("mouseleave", () => {
      btn.style.transform = "";
    });
  });
}

function initThemeToggle() {
  const toggle = document.getElementById("theme-toggle");
  const savedTheme = localStorage.getItem("theme");
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;

  function setTheme(theme) {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
    if (toggle) toggle.textContent = theme === "dark" ? "🌞" : "🌜";
  }

  setTheme(savedTheme || (prefersDark ? "dark" : "light"));

  if (toggle) {
    toggle.addEventListener("click", () => {
      const current = document.documentElement.getAttribute("data-theme");
      setTheme(current === "dark" ? "light" : "dark");
      toggle.classList.add("rotate");
      setTimeout(() => toggle.classList.remove("rotate"), 700);
    });
  }
}

function initHeroVideo() {
  const video = document.getElementById("hero-video");
  if (!video) return;

  const sources = [
    "media/ai-hero1.mp4",
    "media/ai-hero.mp4",
    "media/ai-hero2.mp4"
  ];
  let index = 0;

  video.setAttribute("muted", "");
  video.setAttribute("playsinline", "");
  video.muted = true;
  video.playsInline = true;

 async function loadAndPlay(src) {
  return new Promise((resolve) => {
    video.pause(); // Остановим текущее воспроизведение
    video.removeAttribute("src");
    video.load(); // Очистка предыдущего состояния

    video.classList.remove("loaded");
    video.src = src;

    // Когда данные видео загружены
    video.onloadeddata = () => {
      video.onloadeddata = null;

      const playPromise = video.play();
      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            video.classList.add("loaded");
            resolve();
          })
          .catch((err) => {
            console.warn("🎬 play() error:", err.name);
            resolve();
          });
      } else {
        resolve();
      }
    };
  });
}

  async function playSequence() {
    await loadAndPlay(sources[index]);
    video.onended = () => {
      index = (index + 1) % sources.length;
      playSequence();
    };
  }

  window.addEventListener("load", () => {
    playSequence();
  });
}

function initParticles() {
    const e = document.getElementById("aiParticles");
    if (!e) return;

    const t = e.getContext("2d");
    let n, o, i = window.devicePixelRatio || 1, r = [];
    const a = Math.floor(window.innerWidth / 24);
    let s = { x: null, y: null, radius: 90 };

    function resizeCanvas() {
        n = e.width = e.offsetWidth * i;
        o = e.height = e.offsetHeight * i;
        t.setTransform(i, 0, 0, i, 0, 0);
    }

    function generateParticles() {
        r = [];
        for (let i = 0; i < a; i++) {
            r.push({
                x: Math.random() * n,
                y: Math.random() * o,
                vx: 0.65 * (Math.random() - 0.5),
                vy: 0.65 * (Math.random() - 0.5)
            });
        }
    }

    resizeCanvas();
    generateParticles();

    window.addEventListener("resize", () => {
        resizeCanvas();
        generateParticles();
    });

    e.addEventListener("mousemove", event => {
        const rect = e.getBoundingClientRect();
        s.x = (event.clientX - rect.left) * i;
        s.y = (event.clientY - rect.top) * i;
    });

    e.addEventListener("mouseleave", () => {
        s.x = s.y = null;
    });

    (function animate() {
        t.clearRect(0, 0, n, o);
        for (let i = 0; i < r.length; i++) {
            const p1 = r[i];
            for (let j = i + 1; j < r.length; j++) {
                const p2 = r[j];
                const dx = p1.x - p2.x;
                const dy = p1.y - p2.y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                if (dist < 120) {
                    t.strokeStyle = `rgba(44, 123, 229, ${1 - dist / 120})`;
                    t.lineWidth = 1;
                    t.beginPath();
                    t.moveTo(p1.x, p1.y);
                    t.lineTo(p2.x, p2.y);
                    t.stroke();
                }
            }
        }
        for (let p of r) {
            if (s.x !== null && s.y !== null) {
                const dx = p.x - s.x;
                const dy = p.y - s.y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                if (dist < s.radius) {
                    const angle = Math.atan2(dy, dx);
                    const force = (s.radius - dist) / s.radius;
                    p.vx += Math.cos(angle) * force * 0.9;
                    p.vy += Math.sin(angle) * force * 0.9;
                }
            }
            p.x += p.vx;
            p.y += p.vy;
            if (p.x < 0 || p.x > n) p.vx *= -1;
            if (p.y < 0 || p.y > o) p.vy *= -1;
            t.beginPath();
            t.arc(p.x, p.y, 5.1 * i, 0, 2 * Math.PI);
            t.fillStyle = "rgba(44, 123, 229, 0.75)";
            t.shadowColor = "#2c7be5";
            t.shadowBlur = 6 * i;
            t.fill();
            t.shadowBlur = 0;
        }
        requestAnimationFrame(animate);
    })();
}

function initScrollAnimations() {
    const elements = document.querySelectorAll(".fade-in-on-scroll, .fade-in-left, .fade-in-right, .fade-in-up");
    if (!elements.length) return;

    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("visible");
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.4,
        rootMargin: "0px 0px -12% 0px"
    });

    elements.forEach(el => observer.observe(el));
}

function toggleChat() {
    const chatBody = document.getElementById("chat-body");
    if (chatBody) chatBody.style.display = chatBody.style.display === "block" ? "none" : "block";
}

function addMessage(role, text) {
    const chat = document.getElementById("chat-messages");
    if (!chat) return;
    const div = document.createElement("div");
    div.textContent = (role === "user" ? "Вы: " : "AI: ") + text;
    chat.appendChild(div);
    chat.scrollTop = chat.scrollHeight;
}

window.showSpinner = () => {
    const e = document.getElementById("global-spinner");
    if (e) e.style.display = "flex";
};

window.hideSpinner = () => {
    const e = document.getElementById("global-spinner");
    if (e) e.style.display = "none";
};

window.startProgressBar = () => {
    const e = document.getElementById("global-progress-bar");
    if (e) {
        e.style.opacity = "1";
        e.style.width = "0";
        setTimeout(() => {
            e.style.width = "85%";
        }, 10);
    }
};

window.stopProgressBar = () => {
    const e = document.getElementById("global-progress-bar");
    if (e) {
        e.style.width = "100%";
        setTimeout(() => {
            e.style.opacity = "0";
            e.style.width = "0";
        }, 300);
    }
};

document.addEventListener("DOMContentLoaded", () => {
    initMagnet();
    initThemeToggle();
    initHeroVideo();
    initParticles();
    initScrollAnimations();

    if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
            navigator.serviceWorker.register("/service-worker.js")
                .then(reg => console.log("✅ Service Worker зарегистрирован", reg.scope))
                .catch(err => console.error("❌ Ошибка регистрации Service Worker", err));
        });
    }

    if (typeof AOS !== "undefined") {
        AOS.init({
            duration: 900,
            once: true,
            offset: 60,
            disable: () =>
                window.innerWidth < 600 ||
                /Android|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i.test(navigator.userAgent),
        });
    }
});
